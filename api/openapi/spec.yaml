openapi: 3.0.3
info:
  title: Приложение для доставки еды
  description: Приложение для доставки еды
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'

security:
  - bearerAuth: [ ]

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserProfile:
      type: object
      required: [ name, phone, birthday ]
      properties:
        name:
          type: string
        phone:
          type: string
        birthday:
          type: string
          example: "01.01.1999"

    Product:
      type: object
      required: [ id, name, price, weight, rating ]
      properties:
        id:
          type: string
        image:
          type: string
          format: uri
        name:
          type: string
        weight:
          type: number
        price:
          type: number
        rating:
          type: number
          format: float
        description:
          type: string
        isFavorite:
          type: boolean
        discount:
          type: number
          description: Размер скидки
        reviews:
          type: array
          items:
            $ref: "#/components/schemas/Review"

    ProductPreview:
      type: object
      properties:
        id:
          type: string
        image:
          type: string
        name:
          type: string
        weight:
          type: number
        price:
          type: number
        rating:
          type: number
        reviewCount:
          type: integer
        isFavorite:
          type: boolean
        discount:
          type: number
          description: Размер скидки

    Review:
      type: object
      required: [ rating, author, createdAt, content ]
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
        author:
          type: string
        createdAt:
          type: string
          format: date-time
        content:
          type: string

    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageURL:
          type: string

    OrderItem:
      type: object
      properties:
        id:
          type: string
        image:
          type: string
        name:
          type: string
        weight:
          type: number
        price:
          type: number
        quantity:
          type: integer

    Order:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum: [ active, completed ]
        deliveryDate:
          type: string
        address:
          type: string
        orderPrice:
          type: number
          description: Стоимость товаров в заказе
        deliveryPrice:
          type: number
          description: Стоимость доставки
        totalPrice:
          type: number
          description: Общая стоимость
        totalItems:
          type: integer
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"

    Address:
      type: object
      required: [ id, addressLine, coordinates ]
      properties:
        id:
          type: string
        coordinates:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: number
          description: "Массив [долгота, широта]"
        addressLine:
          type: string
        floor:
          type: string
        entrance:
          type: string
        intercomCode:
          type: string
        comment:
          type: string

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: Unauthorized

  responses:
    "401" :
      description: Токен доступа недействителен или не указан
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            message:
              "Unauthorized"
    "403":
      description: Операция запрещена
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            message: "GetProductByID: forbidden: product is not removable"

    "404":
      description: Искомый объект не найден
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            message: "GetProductByID: not found: product ab936e-9155-43d4-aaf7-6dacbdc668ce\
            \ not found"

    BadRequestError:
      description: Ошибка валидации входных данных
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            message: Bad request

    InternalServerError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            message:
              Internal error

paths:
  /users/me:
    get:
      summary: Получить профиль текущего пользователя
      responses:
        "200":
          description: Профиль пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "401":
          $ref: "#/components/responses/401"
        default:
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Обновить профиль
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ name, birthday ]
              properties:
                name:
                  type: string
                birthday:
                  type: string
                  example: "01.01.1999"
      responses:
        "200":
          description: Успешно обновлено
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/401"
        default:
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Удалить аккаунт
      responses:
        "200":
          description: Аккаунт сброшен к настройкам по умолчанию
        "401":
          $ref: "#/components/responses/401"
        default:
          $ref: "#/components/responses/InternalServerError"

  /logout:
    post:
      summary: Выйти из системы
      responses:
        "200":
          description: Успешный выход
        "401":
          $ref: "#/components/responses/401"
        default:
          $ref: "#/components/responses/InternalServerError"

  /products:
    get:
      summary: Список товаров
      parameters:
        - in: query
          name: category
          description: Будут показаны товары только этой категории
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
        - in: query
          name: pageSize
          schema:
            type: integer
      responses:
        "200":
          description: Список товаров
          content:
            application/json:
              schema:
                type: object
                properties:
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductPreview"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/401"
        default:
          $ref: "#/components/responses/InternalServerError"

  /products/{id}:
    get:
      summary: Детальная информация о товаре
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Продукт
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        default:
          $ref: "#/components/responses/InternalServerError"

  /products/{id}/favorite:
    post:
      summary: Добавить товар в избранное
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Товар добавлен
        "404":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        default:
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Удалить товар из избранного
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Товар удалён
        "404":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        default:
          $ref: "#/components/responses/InternalServerError"

  /categories:
    get:
      summary: Получить список категорий
      responses:
        "200":
          description: Категории
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        "401":
          $ref: "#/components/responses/401"
        default:
          $ref: "#/components/responses/InternalServerError"

  /cart:
    get:
      summary: Получить содержимое корзины
      responses:
        "200":
          description: Корзина
          content:
            application/json:
              schema:
                type: object
                properties:
                  deliveryTime:
                    type: integer
                    description: Сколько минут займет доставка
                  orderPrice:
                    type: number
                    description: Стоимость товаров в заказе
                  deliveryPrice:
                    type: number
                    description: Стоимость доставки
                  totalPrice:
                    type: number
                    description: Общая стоимость
                  items:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/OrderItem"
                        - type: object
                          properties:
                            available:
                              type: boolean
        "401":
          $ref: "#/components/responses/401"
        default:
          $ref: "#/components/responses/InternalServerError"

  /cart/add/{id}:
    post:
      summary: Добавить товар в корзину
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Количество товаров в корзине
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
        "404":
          $ref: "#/components/responses/404"
        "401":
          $ref: "#/components/responses/401"
        default:
          $ref: "#/components/responses/InternalServerError"

  /cart/remove/{id}:
    delete:
      summary: Удалить товар из корзины
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Количество товаров в корзине
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        default:
          $ref: "#/components/responses/InternalServerError"

  /orders:
    post:
      summary: Создать новый заказ
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentMethod:
                  type: string
      responses:
        "200":
          description: Заказ создан
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/401"
        default:
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: Список заказов пользователя
      responses:
        "200":
          description: Список заказов, отсортированных по статусу, а затем по времени заказа по убыванию
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "401":
          $ref: "#/components/responses/401"
        default:
          $ref: "#/components/responses/InternalServerError"

  /reviews:
    post:
      summary: Добавить отзыв
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
      responses:
        "200":
          description: Отзыв добавлен
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/401"
        default:
          $ref: "#/components/responses/InternalServerError"

  /addresses:
    get:
      summary: Список адресов пользователя
      responses:
        "200":
          description: Адреса
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Address"
        "401":
          $ref: "#/components/responses/401"
        default:
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Добавить новый адрес
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Address"
      responses:
        "200":
          description: Адрес добавлен
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/401"
        default:
          $ref: "#/components/responses/InternalServerError"

  /addresses/{id}:
    put:
      summary: Обновить адрес
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Address"
      responses:
        "200":
          description: Адрес обновлен
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        default:
          $ref: "#/components/responses/InternalServerError"
