// Code generated by MockGen. DO NOT EDIT.
// Source: products.go
//
// Generated by this command:
//
//	mockgen -destination=products_mock.go -source=products.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AddFavourite mocks base method.
func (m *MockUserService) AddFavourite(ctx context.Context, id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFavourite", ctx, id)
}

// AddFavourite indicates an expected call of AddFavourite.
func (mr *MockUserServiceMockRecorder) AddFavourite(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavourite", reflect.TypeOf((*MockUserService)(nil).AddFavourite), ctx, id)
}

// IsFavourite mocks base method.
func (m *MockUserService) IsFavourite(ctx context.Context, productID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFavourite", ctx, productID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFavourite indicates an expected call of IsFavourite.
func (mr *MockUserServiceMockRecorder) IsFavourite(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFavourite", reflect.TypeOf((*MockUserService)(nil).IsFavourite), ctx, productID)
}

// RemoveFavourite mocks base method.
func (m *MockUserService) RemoveFavourite(ctx context.Context, id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveFavourite", ctx, id)
}

// RemoveFavourite indicates an expected call of RemoveFavourite.
func (mr *MockUserServiceMockRecorder) RemoveFavourite(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFavourite", reflect.TypeOf((*MockUserService)(nil).RemoveFavourite), ctx, id)
}
